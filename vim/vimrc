
set nocompatible
set backspace=2

syntax enable
syntax on
set background=dark

colorscheme solarized

let g:solarized_termcolors=256

set cursorline
hi CursorLine   cterm=NONE ctermbg=darkblue ctermfg=white guibg=darkred guifg=white


" 搜索和匹配
set showmatch			" 高亮匹配的括号
set matchtime=5 		" 匹配括号高亮的时间（单位是十分之一秒）
set scrolloff=10  		" 光标移动到buffer的顶部和底部时保持10行距离
set hlsearch			" 高亮查找
set incsearch 			" 边输入边查找
set ignorecase 			" 在搜索的时候忽略大小写
set formatoptions=tcrqn 	" 自动格式化
set autoindent 			" 继承前一行的缩进方式，特别适用于多行注释
set smartindent 		" 为C程序提供自动缩进
set cindent 			" 使用C样式的缩进
set smarttab 			" 在行和段开始处使用制表符
set tabstop=8 			" 制表符为
set softtabstop=8 		" 统一缩进为
set shiftwidth=8
"set noexpandtab 		" 不要用空格代替制表符
"set nowrap 			" 不要换行
set fileencodings=utf-8,gbk
	


"——-------------------------------------------------------------------------------------
" vundle 设置

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
	set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
	" alternatively, pass a path where Vundle should install plugins
	"let path = '~/some/path/here'
	"call vundle#rc(path)

	" let Vundle manage Vundle, required

	Plugin 'gmarik/vundle'
	" neocomplete 补全
	Plugin 'Shougo/neocomplete.vim.git'                                                                                              
	Plugin 'Shougo/neosnippet'                                                                                                       
	Plugin 'Shougo/neosnippet-snippets'	
	" 括号自动配对
	Plugin 'jiangmiao/auto-pairs'
	" 最下面的状态栏 airline
	Plugin 'vim-airline/vim-airline'                                                                                               
	Plugin 'vim-airline/vim-airline-themes' 
	Plugin 'powerline/fonts'
	" 自动查错
	Plugin 'scrooloose/syntastic'
	" supertab 补全
	Plugin 'ervandew/supertab'
	" markdown 插件
	Plugin 'tpope/vim-markdown'  
	" 补全
	Plugin 'honza/vim-snippets'
	" 彩虹括号
	Plugin 'luochen1990/rainbow'
	" 快速注释
	Plugin 'tpope/vim-commentary'
	" 自动对齐
	Plugin 'godlygeek/tabular'
	" 缩进显示
	Plugin 'nathanaelkane/vim-indent-guides' 
	" 索引建立
	Plugin 'majutsushi/tagbar'

	" The following are examples of different formats supported.
	" Keep Plugin commands between here and filetype plugin indent on.
	" scripts on GitHub repos  github 上面有的插件安装
	"Plugin 'tpope/vim-fugitive'
	"Plugin 'Lokaltog/vim-easymotion'
	"Plugin 'tpope/vim-rails.git'
	" The sparkup vim script is in a subdirectory of this repo called vim.
	" Pass the path to set the runtimepath properly.
	"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
	" scripts from http://vim-scripts.org/vim/scripts.html
	"Plugin 'L9'
	"Plugin 'FuzzyFinder'
	" scripts not on GitHub
	"Plugin 'git://git.wincent.com/command-t.git'
	" git repos on your local machine (i.e. when working on your own plugin)
	"Plugin 'file:///home/gmarik/path/to/plugin'
	" ...

	filetype plugin indent on     " required
	" To ignore plugin indent changes, instead use:
	"filetype plugin on
	"
	" Brief help
	" :PluginList          - list configured plugins
	" :PluginInstall(!)    - install (update) plugins
	" :PluginSearch(!) foo - search (or refresh cache first) for foo
	" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
	"
	" see :h vundle for more details or wiki for FAQ
	" NOTE: comments after Plugin commands are not allowed.
	" Put your stuff after this line
	"-------------------------------------------------------------------------------------------------------

	"neocomplete 配置
	"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
		\ 'default' : '',
		\ 'vimshell' : $HOME.'/.vimshell_hist',
		\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

			" Define keyword.
			if !exists('g:neocomplete#keyword_patterns')
			let g:neocomplete#keyword_patterns = {}
			endif
			let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	return neocomplete#close_popup() . "\<CR>"
	" For no inserting <CR> key.
	"return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplete#enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplete#enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

"-----------------------------------------------------------------------------------------------------------
" vim-airline 配置
	let g:airline_theme='luna'

	"这个是安装字体后 必须设置此项" 
	let g:airline_powerline_fonts = 1   

	"打开tabline功能,方便查看Buffer和切换，这个功能比较不错"
	"我还省去了minibufexpl插件，因为我习惯在1个Tab下用多个buffer"
"	let g:airline#extensions#tabline#enabled = 1
"	let g:airline#extensions#tabline#buffer_nr_show = 1

	"设置切换Buffer快捷键"
"	nnoremap <C-N> :bn<CR>
"	nnoremap <C-P> :bp<CR>

	" 关闭状态显示空白符号计数,这个对我用处不大"
	let g:airline#extensions#whitespace#enabled = 0
	let g:airline#extensions#whitespace#symbol = '!'
	
	let g:airline#extensions#tabline#enabled = 1
	let g:airline_powerline_fonts = 1
	
	set laststatus=2


" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''


"-----------------------------------------------------------------------------------------------------------
"auto-pair 配置
	let g:AutoPairsFlyMode = 1
	let g:AutoPairsShortcutBackInsert = '<M-b>'	
"-----------------------------------------------------------------------------------------------------------
" syntastic 配置
	let g:syntastic_ignore_files=[".*\.py$"]

"-----------------------------------------------------------------------------------------------------------
" supertab 配置

"-----------------------------------------------------------------------------------------------------------
" markdown 配置
	let g:vim_markdown_frontmatter=1
"-----------------------------------------------------------------------------------------------------------
" 彩虹括号配置
	let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
    let g:rainbow_conf = {
    \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \   'operators': '_,_',
    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \   'separately': {
    \       '*': {},
    \       'tex': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \       },
    \       'lisp': {
    \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \       },
    \       'vim': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \       },
    \       'html': {
    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \       },
    \       'css': 0,
    \   }
    \}

"-------------------------------------------------------------------------------------------------------------
" 自动对齐
	let g:tabular_loaded = 1
"-------------------------------------------------------------------------------------------------------------
" 缩进显示
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_auto_colors = 0
	"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
	"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
"-------------------------------------------------------------------------------------------------------------
" 跳转
	"nmap <Leader>tb :TagbarToggle<CR>
	"let g:tagbar_ctags_bin='/usr/bin/ctags'
	"let g:tagbar_width=30
	"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()
	"set tags="/path/tags"
	"Ctags {                                                                                                                                                      
		set tags=./tags;/,~/.vimtags

		" Make tags placed in .git/tags file available in all levels of a repository
	        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
	        if gitroot != ''
			let &tags = &tags . ',' . gitroot . '/.git/tags'
		endif
		" }

